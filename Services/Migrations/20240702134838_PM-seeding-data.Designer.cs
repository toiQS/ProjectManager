// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Services;

#nullable disable

namespace Services.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240702134838_PM-seeding-data")]
    partial class PMseedingdata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Member_In_Project", b =>
                {
                    b.Property<int>("MemberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberID"));

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int?>("Task_In_ProjectTaskID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("MemberID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("RoleID");

                    b.HasIndex("Task_In_ProjectTaskID");

                    b.ToTable("Member_In_Projects");

                    b.HasData(
                        new
                        {
                            MemberID = 1,
                            ProjectID = 1,
                            RoleID = 1,
                            UserID = 1
                        },
                        new
                        {
                            MemberID = 2,
                            ProjectID = 1,
                            RoleID = 2,
                            UserID = 2
                        });
                });

            modelBuilder.Entity("Models.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectID"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity_Member_Requied")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ProjectID");

                    b.HasIndex("StatusID");

                    b.HasIndex("UserID");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectID = 1,
                            CreateAt = new DateTime(2024, 4, 2, 20, 48, 38, 104, DateTimeKind.Local).AddTicks(337),
                            EndAt = new DateTime(2024, 8, 2, 20, 48, 38, 104, DateTimeKind.Local).AddTicks(359),
                            ProjectDescription = "A complete overhaul of the corporate website.",
                            ProjectInfo = "Redesigning the corporate website.",
                            ProjectName = "Website Redesign",
                            Quantity_Member_Requied = 5,
                            StartAt = new DateTime(2024, 5, 2, 20, 48, 38, 104, DateTimeKind.Local).AddTicks(357),
                            StatusID = 2,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            RoleInfo = "Works on development tasks.",
                            RoleName = "Developer"
                        },
                        new
                        {
                            RoleID = 2,
                            RoleInfo = "Oversees the project.",
                            RoleName = "Manager"
                        });
                });

            modelBuilder.Entity("Models.Status", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusID"));

                    b.Property<string>("StatusInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusID");

                    b.ToTable("Statuss");

                    b.HasData(
                        new
                        {
                            StatusID = 1,
                            StatusInfo = "Project has not started yet.",
                            StatusName = "Not Started"
                        },
                        new
                        {
                            StatusID = 2,
                            StatusInfo = "Project is currently in progress.",
                            StatusName = "In Progress"
                        },
                        new
                        {
                            StatusID = 3,
                            StatusInfo = "Project is completed.",
                            StatusName = "Completed"
                        });
                });

            modelBuilder.Entity("Models.Task_In_Project", b =>
                {
                    b.Property<int>("TaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskID"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskLevelID")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("TaskLevelID");

                    b.ToTable("Task_In_Projects");

                    b.HasData(
                        new
                        {
                            TaskID = 1,
                            CreateAt = new DateTime(2024, 5, 2, 20, 48, 38, 104, DateTimeKind.Local).AddTicks(402),
                            EndAt = new DateTime(2024, 8, 2, 20, 48, 38, 104, DateTimeKind.Local).AddTicks(404),
                            ProjectID = 1,
                            StartAt = new DateTime(2024, 6, 2, 20, 48, 38, 104, DateTimeKind.Local).AddTicks(403),
                            TaskDescription = "Create design mockups for the new website.",
                            TaskLevelID = 1,
                            TaskName = "Design Mockups"
                        });
                });

            modelBuilder.Entity("Models.Task_Level", b =>
                {
                    b.Property<int>("TaskLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskLevelID"));

                    b.Property<string>("TaskInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskParentID")
                        .HasColumnType("int");

                    b.HasKey("TaskLevelID");

                    b.HasIndex("TaskParentID");

                    b.ToTable("Task_Level");

                    b.HasData(
                        new
                        {
                            TaskLevelID = 1,
                            TaskInfo = "Basic level tasks.",
                            TaskName = "Basic"
                        },
                        new
                        {
                            TaskLevelID = 2,
                            TaskInfo = "Intermediate level tasks.",
                            TaskName = "Intermediate"
                        },
                        new
                        {
                            TaskLevelID = 3,
                            TaskInfo = "Advanced level tasks.",
                            TaskName = "Advanced",
                            TaskParentID = 2
                        });
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Email = "admin@example.com",
                            Password = "password",
                            UserName = "admin"
                        },
                        new
                        {
                            UserID = 2,
                            Email = "jdoe@example.com",
                            Password = "password",
                            UserName = "jdoe"
                        });
                });

            modelBuilder.Entity("Models.Member_In_Project", b =>
                {
                    b.HasOne("Models.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Task_In_Project", null)
                        .WithMany("Members")
                        .HasForeignKey("Task_In_ProjectTaskID");

                    b.Navigation("Project");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Models.Project", b =>
                {
                    b.HasOne("Models.Status", "Status")
                        .WithMany("Projects")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Task_In_Project", b =>
                {
                    b.HasOne("Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Task_Level", "TaskLevel")
                        .WithMany()
                        .HasForeignKey("TaskLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("TaskLevel");
                });

            modelBuilder.Entity("Models.Task_Level", b =>
                {
                    b.HasOne("Models.Task_Level", "TaskParent")
                        .WithMany("SubTasks")
                        .HasForeignKey("TaskParentID");

                    b.Navigation("TaskParent");
                });

            modelBuilder.Entity("Models.Project", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Models.Status", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Models.Task_In_Project", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Models.Task_Level", b =>
                {
                    b.Navigation("SubTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
